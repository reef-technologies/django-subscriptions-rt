# Generated by Django 4.1.3 on 2023-07-11 06:14
import logging
from datetime import timedelta

from django.conf import settings
from django.db import migrations
from django.utils.timezone import now
from more_itertools import pairwise

log = logging.getLogger(__name__)


def fix_default_subscriptions(apps, schema_editor):
    from subscriptions.models import MAX_DATETIME

    db_alias = schema_editor.connection.alias
    User = apps.get_model(*settings.AUTH_USER_MODEL.rsplit(".", maxsplit=1))
    Plan = apps.get_model("subscriptions", "Plan")

    try:
        from constance import config
    except ImportError:
        return

    default_plan_id = config.SUBSCRIPTIONS_DEFAULT_PLAN_ID
    default_plan = Plan.objects.using(db_alias).filter(id=default_plan_id).first()
    if not default_plan:
        return

    for user in User.objects.using(db_alias).all():
        subscriptions = user.subscriptions.filter(plan_id=default_plan_id).order_by("start", "end")
        for sub1, sub2 in pairwise(subscriptions):
            assert sub1.start <= sub2.start  # by query definition

            # swallow
            if sub2.end <= sub1.end:
                log.debug("Swallowed:\n%s\n%s", sub1, sub2)

                try:
                    payments = sub2.payments.all()
                    for payment in payments:
                        assert payment.amount.amount == 0, f"Non-zero payment: {payment}"
                    payments.delete()
                    sub2.delete()
                except AssertionError:
                    log.exception("Could not delete %s", sub2)

            # merge
            elif sub2.start <= sub1.end:
                log.debug("Merging:\n%s\n%s", sub1, sub2)
                sub1.end = sub2.end
                sub1.save()

                try:
                    payments = sub2.payments.all()
                    for payment in payments:
                        assert payment.amount.amount == 0, f"Non-zero payment: {payment}"
                    payments.delete()
                    sub2.delete()
                except AssertionError:
                    log.exception("Could not delete %s", sub2)

        # extend last subscription
        last_subscription = subscriptions.last()
        if (
            last_subscription
            and last_subscription.end > now() + timedelta(days=365 * 5)
            and last_subscription.end != MAX_DATETIME
        ):
            log.debug("Extending last default subscription: %s", last_subscription)
            last_subscription.end = MAX_DATETIME
            last_subscription.save()


def noop(apps, schema_editor):
    pass


class Migration(migrations.Migration):
    dependencies = [
        ("subscriptions", "0035_alter_subscription_auto_prolong"),
    ]

    operations = [
        migrations.RunPython(fix_default_subscriptions, noop),
    ]
